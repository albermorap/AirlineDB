/* BORRADO DE TABLAS */
/* BORRADO DE TIPOS */
/* SECUENCIAS */
/* CREACIÓN DE TIPOS */
/* CREACIÓN DE TABLAS */
/* CUERPOS DE TIPOS */

/* BORRADO DE TABLAS */
DROP TABLE BILLETES_TAB PURGE;
DROP TABLE FACTURAS_TAB;
DROP TABLE CLIENTES_TAB;
DROP TABLE CLASES_BILLETE_TAB;
DROP TABLE VUELOS_TAB;
DROP TABLE EMPLEADOS_TAB;
DROP TABLE AVIONES_TAB;


/* BORRADO DE TIPOS */
DROP TYPE FACTURA_OBJ FORCE;
DROP TYPE CLIENTE_OBJ FORCE;
DROP TYPE TARJETA_ARRAY FORCE;
DROP TYPE TARJETA_OBJ FORCE;
DROP TYPE BILLETE_LIST FORCE;
DROP TYPE BILLETE_OBJ FORCE;
DROP TYPE CLASE_BILLETE_OBJ FORCE;
DROP TYPE EQUIPAJE_OBJ FORCE;
DROP TYPE RECLAMACION_ARRAY FORCE;
DROP TYPE RECLAMACION_OBJ FORCE;
DROP TYPE VUELO_OBJ FORCE;
DROP TYPE INCIDENCIA_LIST FORCE;
DROP TYPE INCIDENCIA_OBJ FORCE;
DROP TYPE AVION_OBJ FORCE;
DROP TYPE EMPLEADO_LIST FORCE;
DROP TYPE EMPLEADO_OBJ FORCE;


/*SECUENCIAS*/
DROP SEQUENCE SFACTURAS;
DROP SEQUENCE SVUELOS;
DROP SEQUENCE SBILLETES;
DROP SEQUENCE SINCIDENCIAS;

/*SECUENCIAS*/
CREATE SEQUENCE SFACTURAS
START WITH 1
MAXVALUE 9999999999;

CREATE SEQUENCE SVUELOS
START WITH 1
MAXVALUE 9999999999;

CREATE SEQUENCE SBILLETES
START WITH 1
MAXVALUE 9999999999;

CREATE SEQUENCE SINCIDENCIAS
START WITH 1
MAXVALUE 9999999999;


/* CREACIÓN DE TIPOS */

CREATE OR REPLACE TYPE EMPLEADO_OBJ AS OBJECT(
	DNI        CHAR(9),
	NOMBRE     VARCHAR2(20),
	APELLIDOS  VARCHAR2(25),
	TLF        CHAR(13),
	EMAIL      VARCHAR2(30),
	DIRECCION  VARCHAR2(20),  
	CIUDAD     VARCHAR2(20),
	CP         CHAR(5),
	PAIS       VARCHAR2(15),
	CARGO      VARCHAR2(20),
	SALARIO    NUMBER(6,2),
	
	ORDER MEMBER FUNCTION OrdEmpleado(p_empleado IN EMPLEADO_OBJ) RETURN NUMBER
);
/
CREATE OR REPLACE TYPE EMPLEADO_LIST AS TABLE OF REF EMPLEADO_OBJ;
/
CREATE OR REPLACE TYPE AVION_OBJ AS OBJECT(
	MATRICULA	    CHAR(10),
	CAPACIDAD	    NUMBER(3,0),
	ULTIMA_REV	    DATE,		
	DISPONIBILIDAD	CHAR(2),
	
	ORDER MEMBER FUNCTION OrdAvion(p_avion IN AVION_OBJ) RETURN NUMBER
);
/
CREATE OR REPLACE TYPE INCIDENCIA_OBJ AS OBJECT(
	CODIGO       	CHAR(10),
	TIPO         	VARCHAR2(20),
	DESCRIPCION  	VARCHAR2(140),
	FECHA_CREACION	DATE,
	
	ORDER MEMBER FUNCTION OrdIncidencia(p_incidencia IN INCIDENCIA_OBJ) RETURN NUMBER
);
/
CREATE OR REPLACE TYPE INCIDENCIA_LIST AS TABLE OF INCIDENCIA_OBJ;
/
CREATE OR REPLACE TYPE VUELO_OBJ AS OBJECT(
	ID	            CHAR(10),
	ESTADO	        CHAR(2),
	ORIGEN	        CHAR(3),
	DESTINO        	CHAR(3),
	FECHA_SALIDA   	DATE,
	FECHA_LLEGADA  	DATE,
	PRECIO_BILLETES	NUMBER(6,2),
	AVION	        REF AVION_OBJ,
	ADMINISTRADOR	REF EMPLEADO_OBJ,
	PERSONAL		EMPLEADO_LIST,
	INCIDENCIAS		INCIDENCIA_LIST,
	
	CONSTRUCTOR FUNCTION VUELO_OBJ
		(SELF IN OUT NOCOPY VUELO_OBJ, estado CHAR, origen CHAR, destino CHAR, fecha_salida CHAR, fecha_llegada CHAR, precio_billetes NUMBER, matricula_avion CHAR, dni_administrador CHAR)
	RETURN SELF AS RESULT,
	
	ORDER MEMBER FUNCTION Ordvuelo(p_vuelo IN VUELO_OBJ) RETURN NUMBER,
	
	STATIC FUNCTION Asignar_empleado(dni_empleado CHAR, id_vuelo CHAR) RETURN NUMBER
);
/
CREATE OR REPLACE TYPE RECLAMACION_OBJ AS OBJECT(
	TIPO         	VARCHAR2(20),
	DESCRIPCION  	VARCHAR2(140),
	FECHA_CREACION	DATE,
	EMPLEADO     	REF EMPLEADO_OBJ,
	
	CONSTRUCTOR FUNCTION RECLAMACION_OBJ
		(SELF IN OUT NOCOPY RECLAMACION_OBJ, tipo CHAR, descripcion CHAR, fecha_creacion CHAR, dni_empleado CHAR)
	RETURN SELF AS RESULT,
	
	ORDER MEMBER FUNCTION OrdReclamacion(p_reclamacion IN RECLAMACION_OBJ) RETURN NUMBER
);
/
CREATE OR REPLACE TYPE RECLAMACION_ARRAY AS VARRAY(2) OF RECLAMACION_OBJ;
/
CREATE OR REPLACE TYPE EQUIPAJE_OBJ AS OBJECT(
	NUM_BULTOS		NUMBER(2,0),
	FRAGIL	    	CHAR(2),
	PESO_TOTAL		NUMBER(5,2),
	RECLAMACIONES	RECLAMACION_ARRAY
);
/
CREATE OR REPLACE TYPE CLASE_BILLETE_OBJ AS OBJECT(
	NOMBRE	      		VARCHAR2(20),
	VARIACION_PRECIO 	NUMBER(5,2),
	PESO_MAX     		NUMBER(2,0),
	IMPORTE_SUP  		NUMBER(3,2),
	
	ORDER MEMBER FUNCTION OrdClase(p_clase IN CLASE_BILLETE_OBJ) RETURN NUMBER
);
/
CREATE OR REPLACE TYPE BILLETE_OBJ AS OBJECT(
	ID       	CHAR(10),
	ASIENTO  	CHAR(3),
	PRECIO	 	NUMBER(5,2),
	ANULADO  	CHAR(2),
	IVA      	NUMBER(3,0),
	SUPLEMENTO	NUMBER(5,2),
	VUELO    	REF VUELO_OBJ,
	CLASE		REF CLASE_BILLETE_OBJ,
	EQUIPAJE	EQUIPAJE_OBJ,
	
	CONSTRUCTOR FUNCTION BILLETE_OBJ
		(SELF IN OUT NOCOPY BILLETE_OBJ, asiento CHAR, anulado CHAR, iva NUMBER, vuelo_id CHAR, clase_billete VARCHAR2, dni_cliente CHAR, num_factura CHAR)
	RETURN SELF AS RESULT,
	
	MAP MEMBER FUNCTION ReturnID RETURN NUMBER,
	
	STATIC FUNCTION Asignar_equipaje(id_billete CHAR, num_bultos NUMBER, fragil CHAR, peso_total NUMBER) RETURN NUMBER,
	STATIC FUNCTION Crear_reclamacion(id_billete CHAR, reclamacion RECLAMACION_OBJ) RETURN NUMBER,
	MEMBER PROCEDURE Recalcular_precio
);
/
CREATE OR REPLACE TYPE BILLETE_LIST AS TABLE OF REF BILLETE_OBJ;
/
CREATE OR REPLACE TYPE TARJETA_OBJ AS OBJECT (
	NUMERO			CHAR(16),
	TITULAR			VARCHAR2(45),
	FECHA_CADUCIDAD	DATE,
	CVV				CHAR(3),
	
	MAP MEMBER FUNCTION ReturnNumero RETURN NUMBER
);
/
CREATE OR REPLACE TYPE TARJETA_ARRAY AS VARRAY(3) OF TARJETA_OBJ;
/
CREATE OR REPLACE TYPE CLIENTE_OBJ AS OBJECT (
	DNI        	CHAR(9),
	PASAPORTE  	CHAR(10),
	NOMBRE     	VARCHAR2(20),
	APELLIDOS  	VARCHAR2(25),
	TLF        	CHAR(13),
	EMAIL      	VARCHAR2(30),
	DIRECCION  	VARCHAR2(20),  
	CIUDAD		VARCHAR2(20),
	CP			CHAR(5),
	PAIS		VARCHAR2(15),
	PASSWORD	VARCHAR2(20),
	TARJETAS	TARJETA_ARRAY,
	BILLETES	BILLETE_LIST,
	
	ORDER MEMBER FUNCTION OrdCliente(p_cliente IN CLIENTE_OBJ) RETURN NUMBER
);
/
CREATE OR REPLACE TYPE FACTURA_OBJ AS OBJECT (
	ID             	CHAR(10),
	IMPORTE_TOTAL  	NUMBER(7,2),
	FECHA_COMPRA   	DATE,
	CLIENTE        	REF CLIENTE_OBJ,
	TARJETA			CHAR(16),
	
	CONSTRUCTOR FUNCTION FACTURA_OBJ
		(SELF IN OUT NOCOPY FACTURA_OBJ, fecha_compra DATE, dni_cliente CHAR, num_tarjeta CHAR)
	RETURN SELF AS RESULT,
	
	ORDER MEMBER FUNCTION OrdFactura(p_factura IN FACTURA_OBJ) RETURN NUMBER
);
/
ALTER TYPE BILLETE_OBJ ADD ATTRIBUTE (CLIENTE REF CLIENTE_OBJ, FACTURA REF FACTURA_OBJ) CASCADE;


/* CREACIÓN DE TABLAS */
/
CREATE TABLE AVIONES_TAB OF AVION_OBJ(
	CONSTRAINT PK_MATRICULA_AVIONES 		PRIMARY KEY (MATRICULA),
	
	CONSTRAINT C_DISPONIBILIDAD_AVIONES		CHECK (DISPONIBILIDAD IN ('SI','NO')),
	
	CONSTRAINT NN_CAPACIDAD_AVIONES 		CAPACIDAD NOT NULL,
	CONSTRAINT NN_DISPONIBILIDAD_AVIONES 	DISPONIBILIDAD NOT NULL
);
/
CREATE TABLE EMPLEADOS_TAB OF EMPLEADO_OBJ(
	CONSTRAINT PK_DNI_EMPLEADOS 		PRIMARY KEY (DNI),

	CONSTRAINT C_CARGO_EMPLEADOS 		CHECK (CARGO IN ('ADMINISTRADOR','PILOTO','AZAFATA','TAQUILLA')),
	
	CONSTRAINT NN_NOMBRE_EMPLEADOS 		NOMBRE NOT NULL,
	CONSTRAINT NN_APELLIDOS_EMPLEADOS 	APELLIDOS NOT NULL,
	CONSTRAINT NN_EMAIL_EMPLEADOS 		EMAIL NOT NULL,
	CONSTRAINT NN_CARGO_EMPLEADOS 		CARGO NOT NULL,
	CONSTRAINT NN_SALARIO_EMPLEADOS 	SALARIO NOT NULL
);
/
CREATE TABLE VUELOS_TAB OF VUELO_OBJ(
	CONSTRAINT PK_ID_VUELOS					PRIMARY KEY (ID),
	
	CONSTRAINT C_ESTADO_VUELOS				CHECK (ESTADO IN ('D','EC','C','R','E')),
	CONSTRAINT C_PRECIO_BILLETES_VUELOS		CHECK (PRECIO_BILLETES >= 0),
	CONSTRAINT C_SALIDA_LLEGADA				CHECK (FECHA_SALIDA < FECHA_LLEGADA),
									
	CONSTRAINT NN_ESTADO_VUELOS 			ESTADO NOT NULL,
	CONSTRAINT NN_ORIGEN_VUELOS				ORIGEN NOT NULL,
	CONSTRAINT NN_DESTINO_VUELOS			DESTINO NOT NULL,
	CONSTRAINT NN_FECHA_SALIDA_VUELOS		FECHA_SALIDA NOT NULL,
	CONSTRAINT NN_FECHA_LLEGADA_VUELOS		FECHA_LLEGADA NOT NULL,
	CONSTRAINT NN_PRECIO_BILLETES_VUELOS	PRECIO_BILLETES NOT NULL,
	CONSTRAINT NN_AVION_VUELOS				CHECK (AVION IS NOT NULL),
	CONSTRAINT NN_ADMINISTRADOR_VUELOS		CHECK (ADMINISTRADOR IS NOT NULL),
	CONSTRAINT NN_PERSONAL_VUELOS			CHECK (PERSONAL IS NOT NULL),
											   
	AVION REFERENCES AVIONES_TAB,
	ADMINISTRADOR REFERENCES EMPLEADOS_TAB
)
NESTED TABLE PERSONAL STORE AS PERSONAL_NTAB,
NESTED TABLE INCIDENCIAS STORE AS INCIDENCIAS_NTAB(
	(CONSTRAINT PK_CODIGO_INCIDENCIAS    		PRIMARY KEY (CODIGO),
	
	CONSTRAINT C_TIPO_INCIDENCIAS       		CHECK (TIPO IN('R','AV','C')),

	CONSTRAINT NN_TIPO_INCIDENCIAS				TIPO NOT NULL,
	CONSTRAINT NN_DESCRIPCION_INCIDENCIAS		DESCRIPCION NOT NULL,
	CONSTRAINT NN_FECHA_CREACION_INCIDENCIAS	FECHA_CREACION NOT NULL)
);
ALTER TABLE PERSONAL_NTAB ADD(SCOPE FOR(COLUMN_VALUE) IS EMPLEADOS_TAB);
/
CREATE TABLE CLASES_BILLETE_TAB OF CLASE_BILLETE_OBJ(
	CONSTRAINT PK_NOMBRE_CLASESB			PRIMARY KEY (NOMBRE),
	
	CONSTRAINT C_VARIACION_PRECIO_CLASESB	CHECK (VARIACION_PRECIO >= 0),
	CONSTRAINT C_PESO_MAX_CLASESB    		CHECK (PESO_MAX >= 0 AND PESO_MAX <= 50),
	CONSTRAINT C_IMPORTE_SUP_CLASESB    	CHECK (IMPORTE_SUP >= 0),
	
	CONSTRAINT NN_VARIACION_PRECIO_CLASESB 	VARIACION_PRECIO NOT NULL,
	CONSTRAINT NN_PESO_MAX_CLASESB			PESO_MAX NOT NULL,
	CONSTRAINT NN_IMPORTE_SUP_CLASESB 		IMPORTE_SUP NOT NULL
);
/
CREATE TABLE CLIENTES_TAB OF CLIENTE_OBJ(
	CONSTRAINT PK_DNI_CLIENTES       	PRIMARY KEY (DNI),
	CONSTRAINT U_PASAPORTE_CLIENTES  	UNIQUE (PASAPORTE),
	
	CONSTRAINT NN_NOMBRE_CLIENTES 		NOMBRE NOT NULL,
	CONSTRAINT NN_APELLIDOS_CLIENTES 	APELLIDOS NOT NULL,
	CONSTRAINT NN_EMAIL_CLIENTES		EMAIL NOT NULL
)
NESTED TABLE BILLETES STORE AS BILLETES_NTAB;
/
CREATE TABLE FACTURAS_TAB OF FACTURA_OBJ(
	CONSTRAINT PK_ID_FACTURAS 				PRIMARY KEY (ID),
	
	CONSTRAINT C_IMPORTE_TOTAL_FACTURAS   	CHECK (IMPORTE_TOTAL >= 0),
	
	CONSTRAINT NN_IMPORTE_TOTAL_FACTURAS 	IMPORTE_TOTAL NOT NULL,
	CONSTRAINT NN_FECHA_COMPRA_FACTURAS		FECHA_COMPRA NOT NULL,
	CONSTRAINT NN_CLIENTE_FACTURAS			CHECK (CLIENTE IS NOT NULL),
	
	CLIENTE REFERENCES CLIENTES_TAB
);
/
CREATE TABLE BILLETES_TAB OF BILLETE_OBJ(
	CONSTRAINT PK_ID_BILLETES 			PRIMARY KEY (ID),
	
	CONSTRAINT C_PRECIO_BILLETES    	CHECK (PRECIO >= 0),
	CONSTRAINT C_ANULADO_BILLETES   	CHECK (ANULADO IN ('SI','NO')),
	CONSTRAINT C_IVA_BILLETES   		CHECK (IVA >= 0 AND IVA <= 100),
	CONSTRAINT C_SUPLEMENTO_BILLETES    CHECK (SUPLEMENTO >= 0),
	CONSTRAINT C_NUM_BULTOS_EQUIPAJE    CHECK (EQUIPAJE.NUM_BULTOS >= 1),
	CONSTRAINT C_FRAGIL_EQUIPAJE    	CHECK (EQUIPAJE.FRAGIL IN ('SI','NO')),
	CONSTRAINT C_PESO_TOTAL_EQUIPAJE    CHECK (EQUIPAJE.PESO_TOTAL > 0),
	
	CONSTRAINT NN_ASIENTO_BILLETES		ASIENTO NOT NULL,
	CONSTRAINT NN_PRECIO_BILLETES		PRECIO NOT NULL,
	CONSTRAINT NN_ANULADO_BILLETES 		ANULADO NOT NULL,
	CONSTRAINT NN_IVA_BILLETES 			IVA NOT NULL,
	CONSTRAINT NN_CLIENTE_BILLETES 		CHECK (CLIENTE IS NOT NULL),
	CONSTRAINT NN_FACTURA_BILLETES 		CHECK (FACTURA IS NOT NULL),
	CONSTRAINT NN_VUELO_BILLETES 		CHECK (VUELO IS NOT NULL),
	CONSTRAINT NN_CLASE_BILLETES 		CHECK (CLASE IS NOT NULL),
	
	/*CONSTRAINT NN_NUM_BULTOS_EQUIPAJE 	CHECK (EQUIPAJE.NUM_BULTOS IS NOT NULL),
	CONSTRAINT NN_FRAGIL_EQUIPAJE 		CHECK (EQUIPAJE.FRAGIL IS NOT NULL),
	CONSTRAINT NN_PESO_TOTAL_EQUIPAJE 	CHECK (EQUIPAJE.PESO_TOTAL IS NOT NULL),*/
	
	CLIENTE REFERENCES CLIENTES_TAB,
	FACTURA REFERENCES FACTURAS_TAB,
	VUELO REFERENCES VUELOS_TAB,
	CLASE REFERENCES CLASES_BILLETE_TAB
);
/
ALTER TABLE BILLETES_NTAB ADD(SCOPE FOR(COLUMN_VALUE) IS BILLETES_TAB);


/* CUERPOS DE TIPOS */
/
CREATE OR REPLACE TYPE BODY EMPLEADO_OBJ AS
	ORDER MEMBER FUNCTION OrdEmpleado(p_empleado IN EMPLEADO_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_empleado.APELLIDOS = SELF.APELLIDOS THEN
			IF p_empleado.NOMBRE < SELF.NOMBRE THEN RETURN 1;
			ELSIF p_empleado.NOMBRE > SELF.NOMBRE THEN RETURN -1;
			ELSE RETURN 0;
			END IF;
		ELSE
			IF p_empleado.APELLIDOS < SELF.APELLIDOS THEN RETURN 1;
			ELSE RETURN -1;
			END IF;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY AVION_OBJ AS
	ORDER MEMBER FUNCTION OrdAvion(p_avion IN AVION_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_avion.MATRICULA < SELF.MATRICULA THEN RETURN 1;
		ELSIF p_avion.MATRICULA > SELF.MATRICULA THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY INCIDENCIA_OBJ AS
	ORDER MEMBER FUNCTION OrdIncidencia(p_incidencia IN INCIDENCIA_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_incidencia.FECHA_CREACION < SELF.FECHA_CREACION THEN RETURN 1;
		ELSIF p_incidencia.FECHA_CREACION > SELF.FECHA_CREACION THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY VUELO_OBJ AS
	CONSTRUCTOR FUNCTION VUELO_OBJ
		(SELF IN OUT NOCOPY VUELO_OBJ, estado CHAR, origen CHAR, destino CHAR, fecha_salida CHAR, fecha_llegada CHAR, precio_billetes NUMBER, matricula_avion CHAR, dni_administrador CHAR)
	RETURN SELF AS RESULT IS
	BEGIN
		SELF.ID := TO_CHAR(SVUELOS.NEXTVAL);
		SELF.ESTADO := estado;
		SELF.ORIGEN := origen;
		SELF.DESTINO := destino;
		SELF.FECHA_SALIDA := TO_DATE(fecha_salida, 'DD/MM/YY HH24:MI:SS');
		SELF.FECHA_LLEGADA := TO_DATE(fecha_llegada, 'DD/MM/YY HH24:MI:SS');
		SELF.PRECIO_BILLETES := precio_billetes;
    
		SELECT REF(A) INTO SELF.AVION 
		FROM AVIONES_TAB A 
		WHERE A.MATRICULA = matricula_avion;
		
		SELECT REF(E) INTO SELF.ADMINISTRADOR 
		FROM EMPLEADOS_TAB E 
		WHERE E.DNI = dni_administrador;
    
		SELF.PERSONAL := EMPLEADO_LIST();
		SELF.INCIDENCIAS := INCIDENCIA_LIST();
		RETURN;
	END;
	
	ORDER MEMBER FUNCTION OrdVuelo(p_vuelo IN VUELO_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_vuelo.FECHA_SALIDA < SELF.FECHA_SALIDA THEN RETURN 1;
		ELSIF p_vuelo.FECHA_SALIDA > SELF.FECHA_SALIDA THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
	
	STATIC FUNCTION Asignar_empleado(dni_empleado CHAR, id_vuelo CHAR)
	RETURN NUMBER IS
		ERROR_REPETIDO EXCEPTION;
		PRAGMA EXCEPTION_INIT(ERROR_REPETIDO, -20001); /* Asociamos el error a la excepción */
		ERROR_CARGO EXCEPTION;
		PRAGMA EXCEPTION_INIT(ERROR_CARGO, -20002);
		ERROR_NO_EXISTE EXCEPTION;
	BEGIN
		INSERT INTO TABLE (SELECT PERSONAL FROM VISTA_PERSONAL WHERE ID = id_vuelo)
			SELECT REF(E) FROM EMPLEADOS_TAB E WHERE E.DNI = dni_empleado;	/* Si no encuentra nada no hace insert y no salta el disparador */
			
		IF (SQL%ROWCOUNT = 0) THEN
			RAISE ERROR_NO_EXISTE;
		END IF;
		
		RETURN 1;
		
		EXCEPTION
		WHEN ERROR_REPETIDO THEN
			DBMS_OUTPUT.PUT_LINE('ERROR: El empleado ya esta asignado a este vuelo');
			RETURN -1;
		WHEN ERROR_CARGO THEN
			DBMS_OUTPUT.PUT_LINE('ERROR: El empleado no tiene un cargo adecuado para la asignaciOn');
			RETURN -1;
		WHEN ERROR_NO_EXISTE THEN
			DBMS_OUTPUT.PUT_LINE('ERROR: El empleado no existe');
			RETURN -1;
	END;
END;

/

CREATE OR REPLACE TYPE BODY RECLAMACION_OBJ AS
	CONSTRUCTOR FUNCTION RECLAMACION_OBJ
		(SELF IN OUT NOCOPY RECLAMACION_OBJ, tipo CHAR, descripcion CHAR, fecha_creacion CHAR, dni_empleado CHAR)
	RETURN SELF AS RESULT IS
	BEGIN
		SELF.TIPO := tipo;
		SELF.DESCRIPCION := descripcion;
		SELF.FECHA_CREACION := TO_DATE(fecha_creacion, 'DD/MM/YY HH24:MI:SS');
		
		SELECT REF(E) INTO SELF.EMPLEADO
		FROM EMPLEADOS_TAB E
		WHERE E.DNI = dni_empleado;
		
		RETURN;
	END;

	ORDER MEMBER FUNCTION OrdReclamacion(p_reclamacion IN RECLAMACION_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_reclamacion.FECHA_CREACION < SELF.FECHA_CREACION THEN RETURN 1;
		ELSIF p_reclamacion.FECHA_CREACION > SELF.FECHA_CREACION THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY CLASE_BILLETE_OBJ AS
	ORDER MEMBER FUNCTION OrdClase(p_clase IN CLASE_BILLETE_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_clase.NOMBRE < SELF.NOMBRE THEN RETURN 1;
		ELSIF p_clase.NOMBRE > SELF.NOMBRE THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY BILLETE_OBJ AS
	CONSTRUCTOR FUNCTION BILLETE_OBJ
		(SELF IN OUT NOCOPY BILLETE_OBJ, asiento CHAR, anulado CHAR, iva NUMBER, vuelo_id CHAR, clase_billete VARCHAR2, dni_cliente CHAR, num_factura CHAR)
	RETURN SELF AS RESULT IS
	BEGIN
		SELF.ID := TO_CHAR(SBILLETES.NEXTVAL);
		SELF.ASIENTO := asiento;
		SELF.ANULADO := anulado;
		SELF.IVA := iva;
		
		SELECT REF(V) INTO SELF.VUELO
		FROM VUELOS_TAB V
		WHERE V.ID = vuelo_id;
		
		SELECT REF(E) INTO SELF.CLASE
		FROM CLASES_BILLETE_TAB E
		WHERE E.NOMBRE = clase_billete;
		
		SELF.Recalcular_precio();
		
		SELECT REF(C) INTO SELF.CLIENTE
		FROM CLIENTES_TAB C
		WHERE C.DNI = dni_cliente;
		
		SELECT REF(F) INTO SELF.FACTURA
		FROM FACTURAS_TAB F
		WHERE F.ID = num_factura;
	
		RETURN;
	END;
	
	MAP MEMBER FUNCTION ReturnID
	RETURN NUMBER IS
	BEGIN
		RETURN TO_NUMBER(SELF.ID);
	END;
	
	STATIC FUNCTION Asignar_equipaje(id_billete CHAR, num_bultos NUMBER, fragil CHAR, peso_total NUMBER)
	RETURN NUMBER IS
		billete BILLETE_OBJ;
	BEGIN
		SELECT VALUE(B) INTO billete
		FROM BILLETES_TAB B
		WHERE id_billete = B.ID;
	
		UPDATE BILLETES_TAB B
		SET EQUIPAJE = EQUIPAJE_OBJ(num_bultos, fragil, peso_total, RECLAMACION_ARRAY())
		WHERE billete.ID = B.ID;
		
		RETURN 1;
		
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN -1;
	END;
  
	STATIC FUNCTION Crear_reclamacion(id_billete CHAR, reclamacion RECLAMACION_OBJ)
	RETURN NUMBER IS
		equipaje2 EQUIPAJE_OBJ;
		MAX_RECLAMACIONES EXCEPTION;
		ERROR_CARGO EXCEPTION;
		PRAGMA EXCEPTION_INIT(ERROR_CARGO, -20004);
		NO_PERMITIDA EXCEPTION;
		PRAGMA EXCEPTION_INIT(NO_PERMITIDA, -20005);
	BEGIN
		SELECT VALUE(B).EQUIPAJE INTO equipaje2
		FROM BILLETES_TAB B
		WHERE id_billete = B.ID;
		
		IF (equipaje2.RECLAMACIONES.COUNT = 0) THEN
			equipaje2.RECLAMACIONES := RECLAMACION_ARRAY(reclamacion);
		ELSIF (equipaje2.RECLAMACIONES.COUNT = 1) THEN
			equipaje2.RECLAMACIONES.EXTEND;
			equipaje2.RECLAMACIONES(2) := reclamacion;
		ELSE
			RETURN -1;
		END IF;
	
		UPDATE BILLETES_TAB B
		SET B.EQUIPAJE = equipaje2
		WHERE id_billete = B.ID;
		
		RETURN 1;
		
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN -1;
		WHEN MAX_RECLAMACIONES THEN
			RETURN -1;
		WHEN ERROR_CARGO THEN
			DBMS_OUTPUT.PUT_LINE('El emplado no tiene el cargo apropiado.');
			RETURN -1;
		WHEN NO_PERMITIDA THEN
			DBMS_OUTPUT.PUT_LINE('No se permite agregar esa reaclamacion');
			RETURN -1;
	END;
	
	MEMBER PROCEDURE Recalcular_precio IS
		v_base NUMBER;
		v_variacion NUMBER;
	BEGIN
		SELECT DEREF(SELF.VUELO).PRECIO_BILLETES INTO v_base FROM DUAL;
		SELECT DEREF(SELF.CLASE).VARIACION_PRECIO INTO v_variacion FROM DUAL;
		SELF.PRECIO := v_base * v_variacion;
	END;
END;

/

CREATE OR REPLACE TYPE BODY TARJETA_OBJ AS
	MAP MEMBER FUNCTION ReturnNumero
	RETURN NUMBER IS
	BEGIN
		RETURN TO_NUMBER(SELF.NUMERO);
	END;
END;

/

CREATE OR REPLACE TYPE BODY CLIENTE_OBJ AS
	ORDER MEMBER FUNCTION OrdCliente(p_cliente IN CLIENTE_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_cliente.APELLIDOS = SELF.APELLIDOS THEN
			IF p_cliente.NOMBRE < SELF.NOMBRE THEN RETURN 1;
			ELSIF p_cliente.NOMBRE > SELF.NOMBRE THEN RETURN -1;
			ELSE RETURN 0;
			END IF;
		ELSE
			IF p_cliente.APELLIDOS < SELF.APELLIDOS THEN RETURN 1;
			ELSE RETURN -1;
			END IF;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY FACTURA_OBJ AS
	CONSTRUCTOR FUNCTION FACTURA_OBJ
		(SELF IN OUT NOCOPY FACTURA_OBJ, fecha_compra DATE, dni_cliente CHAR, num_tarjeta CHAR)
	RETURN SELF AS RESULT IS
		a_tarjetas 	TARJETA_ARRAY;
		ind			NUMBER;
		v_tarjeta 	TARJETA_OBJ;
	BEGIN
		SELF.ID := TO_CHAR(SFACTURAS.NEXTVAL);
		SELF.IMPORTE_TOTAL := 0;
		
		IF (fecha_compra IS NOT NULL) THEN
			SELF.FECHA_COMPRA := fecha_compra;
		ELSE
			SELF.FECHA_COMPRA := SYSDATE;
		END IF;
		
		SELECT REF(C) INTO SELF.CLIENTE
		FROM CLIENTES_TAB C
		WHERE C.DNI = dni_cliente;
		
		SELF.TARJETA := num_tarjeta;
		
		RETURN;
		
		/*FOR ind IN SELF.BILLETES.FIRST .. SELF.BILLETES.LAST
		LOOP
			SELECT DEREF(SELF.BILLETES(ind)).PRECIO INTO v_precio FROM DUAL;
			SELECT DEREF(SELF.BILLETES(ind)).IVA INTO v_iva FROM DUAL;
			SELF.IMPORTE_TOTAL := SELF.IMPORTE_TOTAL + (v_precio * (1 + v_iva/100));
		END LOOP;*/
	END;

	ORDER MEMBER FUNCTION OrdFactura(p_factura IN FACTURA_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_factura.FECHA_COMPRA < SELF.FECHA_COMPRA THEN RETURN 1;
		ELSIF p_factura.FECHA_COMPRA > SELF.FECHA_COMPRA THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;