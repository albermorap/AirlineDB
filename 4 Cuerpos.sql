/* CUERPOS DE TIPOS */
/
CREATE OR REPLACE TYPE BODY EMPLEADO_OBJ AS
	ORDER MEMBER FUNCTION OrdEmpleado(p_empleado IN EMPLEADO_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_empleado.APELLIDOS = SELF.APELLIDOS THEN
			IF p_empleado.NOMBRE < SELF.NOMBRE THEN RETURN 1;
			ELSIF p_empleado.NOMBRE > SELF.NOMBRE THEN RETURN -1;
			ELSE RETURN 0;
			END IF;
		ELSE
			IF p_empleado.APELLIDOS < SELF.APELLIDOS THEN RETURN 1;
			ELSE RETURN -1;
			END IF;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY AVION_OBJ AS
	ORDER MEMBER FUNCTION OrdAvion(p_avion IN AVION_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_avion.MATRICULA < SELF.MATRICULA THEN RETURN 1;
		ELSIF p_avion.MATRICULA > SELF.MATRICULA THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY INCIDENCIA_OBJ AS
	ORDER MEMBER FUNCTION OrdIncidencia(p_incidencia IN INCIDENCIA_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_incidencia.FECHA_CREACION < SELF.FECHA_CREACION THEN RETURN 1;
		ELSIF p_incidencia.FECHA_CREACION > SELF.FECHA_CREACION THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY VUELO_OBJ AS
	CONSTRUCTOR FUNCTION VUELO_OBJ
		(SELF IN OUT NOCOPY VUELO_OBJ, estado CHAR, origen CHAR, destino CHAR, fecha_salida CHAR, fecha_llegada CHAR, precio_billetes NUMBER, matricula_avion CHAR, dni_administrador CHAR)
	RETURN SELF AS RESULT IS
	BEGIN
		SELF.ID := TO_CHAR(SVUELOS.NEXTVAL);
		SELF.ESTADO := estado;
		SELF.ORIGEN := origen;
		SELF.DESTINO := destino;
		SELF.FECHA_SALIDA := TO_DATE(fecha_salida, 'DD/MM/YY HH24:MI:SS');
		SELF.FECHA_LLEGADA := TO_DATE(fecha_llegada, 'DD/MM/YY HH24:MI:SS');
		SELF.PRECIO_BILLETES := precio_billetes;
    
		SELECT REF(A) INTO SELF.AVION 
		FROM AVIONES_TAB A 
		WHERE A.MATRICULA = matricula_avion;
		
		SELECT REF(E) INTO SELF.ADMINISTRADOR 
		FROM EMPLEADOS_TAB E 
		WHERE E.DNI = dni_administrador;
    
		SELF.PERSONAL := EMPLEADO_LIST();
		SELF.INCIDENCIAS := INCIDENCIA_LIST();
		RETURN;
	END;
	
	ORDER MEMBER FUNCTION OrdVuelo(p_vuelo IN VUELO_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_vuelo.FECHA_SALIDA < SELF.FECHA_SALIDA THEN RETURN 1;
		ELSIF p_vuelo.FECHA_SALIDA > SELF.FECHA_SALIDA THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
	
	STATIC FUNCTION Asignar_empleado(dni_empleado CHAR, id_vuelo CHAR)
	RETURN NUMBER IS
		ERROR_REPETIDO EXCEPTION;
		PRAGMA EXCEPTION_INIT(ERROR_REPETIDO, -20001); /* Asociamos el error a la excepci√≥n */
		ERROR_CARGO EXCEPTION;
		PRAGMA EXCEPTION_INIT(ERROR_CARGO, -20002);
		ERROR_NO_EXISTE EXCEPTION;
	BEGIN
		INSERT INTO TABLE (SELECT PERSONAL FROM VISTA_PERSONAL WHERE ID = id_vuelo)
			SELECT REF(E) FROM EMPLEADOS_TAB E WHERE E.DNI = dni_empleado;	/* Si no encuentra nada no hace insert y no salta el disparador */
			
		IF (SQL%ROWCOUNT = 0) THEN
			RAISE ERROR_NO_EXISTE;
		END IF;
		
		RETURN 1;
		
		EXCEPTION
		WHEN ERROR_REPETIDO THEN
			DBMS_OUTPUT.PUT_LINE('ERROR: El empleado ya esta asignado a este vuelo');
			RETURN -1;
		WHEN ERROR_CARGO THEN
			DBMS_OUTPUT.PUT_LINE('ERROR: El empleado no tiene un cargo adecuado para la asignaciOn');
			RETURN -1;
		WHEN ERROR_NO_EXISTE THEN
			DBMS_OUTPUT.PUT_LINE('ERROR: El empleado no existe');
			RETURN -1;
	END;
END;

/

CREATE OR REPLACE TYPE BODY RECLAMACION_OBJ AS
	CONSTRUCTOR FUNCTION RECLAMACION_OBJ
		(SELF IN OUT NOCOPY RECLAMACION_OBJ, tipo CHAR, descripcion CHAR, fecha_creacion CHAR, dni_empleado CHAR)
	RETURN SELF AS RESULT IS
	BEGIN
		SELF.TIPO := tipo;
		SELF.DESCRIPCION := descripcion;
		SELF.FECHA_CREACION := TO_DATE(fecha_creacion, 'DD/MM/YY HH24:MI:SS');
		
		SELECT REF(E) INTO SELF.EMPLEADO
		FROM EMPLEADOS_TAB E
		WHERE E.DNI = dni_empleado;
		
		RETURN;
	END;

	ORDER MEMBER FUNCTION OrdReclamacion(p_reclamacion IN RECLAMACION_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_reclamacion.FECHA_CREACION < SELF.FECHA_CREACION THEN RETURN 1;
		ELSIF p_reclamacion.FECHA_CREACION > SELF.FECHA_CREACION THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY CLASE_BILLETE_OBJ AS
	ORDER MEMBER FUNCTION OrdClase(p_clase IN CLASE_BILLETE_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_clase.NOMBRE < SELF.NOMBRE THEN RETURN 1;
		ELSIF p_clase.NOMBRE > SELF.NOMBRE THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY BILLETE_OBJ AS
	CONSTRUCTOR FUNCTION BILLETE_OBJ
		(SELF IN OUT NOCOPY BILLETE_OBJ, asiento CHAR, anulado CHAR, iva NUMBER, vuelo_id CHAR, clase_billete VARCHAR2, dni_cliente CHAR, num_factura CHAR)
	RETURN SELF AS RESULT IS
	BEGIN
		SELF.ID := TO_CHAR(SBILLETES.NEXTVAL);
		SELF.ASIENTO := asiento;
		SELF.ANULADO := anulado;
		SELF.IVA := iva;
		
		SELECT REF(V) INTO SELF.VUELO
		FROM VUELOS_TAB V
		WHERE V.ID = vuelo_id;
		
		SELECT REF(E) INTO SELF.CLASE
		FROM CLASES_BILLETE_TAB E
		WHERE E.NOMBRE = clase_billete;
		
		SELF.Recalcular_precio();
		
		SELECT REF(C) INTO SELF.CLIENTE
		FROM CLIENTES_TAB C
		WHERE C.DNI = dni_cliente;
		
		SELECT REF(F) INTO SELF.FACTURA
		FROM FACTURAS_TAB F
		WHERE F.ID = num_factura;
	
		RETURN;
	END;
	
	MAP MEMBER FUNCTION ReturnID
	RETURN NUMBER IS
	BEGIN
		RETURN TO_NUMBER(SELF.ID);
	END;
	
	STATIC FUNCTION Asignar_equipaje(id_billete CHAR, num_bultos NUMBER, fragil CHAR, peso_total NUMBER)
	RETURN NUMBER IS
		billete BILLETE_OBJ;
	BEGIN
		SELECT VALUE(B) INTO billete
		FROM BILLETES_TAB B
		WHERE id_billete = B.ID;
	
		UPDATE BILLETES_TAB B
		SET EQUIPAJE = EQUIPAJE_OBJ(num_bultos, fragil, peso_total, RECLAMACION_ARRAY())
		WHERE billete.ID = B.ID;
		
		RETURN 1;
		
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN -1;
	END;
  
	STATIC FUNCTION Crear_reclamacion(id_billete CHAR, reclamacion RECLAMACION_OBJ)
	RETURN NUMBER IS
		equipaje2 EQUIPAJE_OBJ;
		MAX_RECLAMACIONES EXCEPTION;
		ERROR_CARGO EXCEPTION;
		PRAGMA EXCEPTION_INIT(ERROR_CARGO, -20004);
		NO_PERMITIDA EXCEPTION;
		PRAGMA EXCEPTION_INIT(NO_PERMITIDA, -20005);
	BEGIN
		SELECT VALUE(B).EQUIPAJE INTO equipaje2
		FROM BILLETES_TAB B
		WHERE id_billete = B.ID;
		
		IF (equipaje2.RECLAMACIONES.COUNT = 0) THEN
			equipaje2.RECLAMACIONES := RECLAMACION_ARRAY(reclamacion);
		ELSIF (equipaje2.RECLAMACIONES.COUNT = 1) THEN
			equipaje2.RECLAMACIONES.EXTEND;
			equipaje2.RECLAMACIONES(2) := reclamacion;
		ELSE
			RETURN -1;
		END IF;
	
		UPDATE BILLETES_TAB B
		SET B.EQUIPAJE = equipaje2
		WHERE id_billete = B.ID;
		
		RETURN 1;
		
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN -1;
		WHEN MAX_RECLAMACIONES THEN
			RETURN -1;
		WHEN ERROR_CARGO THEN
			DBMS_OUTPUT.PUT_LINE('El emplado no tiene el cargo apropiado.');
			RETURN -1;
		WHEN NO_PERMITIDA THEN
			DBMS_OUTPUT.PUT_LINE('No se permite agregar esa reaclamacion');
			RETURN -1;
	END;
	
	MEMBER PROCEDURE Recalcular_precio IS
		v_base NUMBER;
		v_variacion NUMBER;
	BEGIN
		SELECT DEREF(SELF.VUELO).PRECIO_BILLETES INTO v_base FROM DUAL;
		SELECT DEREF(SELF.CLASE).VARIACION_PRECIO INTO v_variacion FROM DUAL;
		SELF.PRECIO := v_base * v_variacion;
	END;
END;

/

CREATE OR REPLACE TYPE BODY TARJETA_OBJ AS
	MAP MEMBER FUNCTION ReturnNumero
	RETURN NUMBER IS
	BEGIN
		RETURN TO_NUMBER(SELF.NUMERO);
	END;
END;

/

CREATE OR REPLACE TYPE BODY CLIENTE_OBJ AS
	ORDER MEMBER FUNCTION OrdCliente(p_cliente IN CLIENTE_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_cliente.APELLIDOS = SELF.APELLIDOS THEN
			IF p_cliente.NOMBRE < SELF.NOMBRE THEN RETURN 1;
			ELSIF p_cliente.NOMBRE > SELF.NOMBRE THEN RETURN -1;
			ELSE RETURN 0;
			END IF;
		ELSE
			IF p_cliente.APELLIDOS < SELF.APELLIDOS THEN RETURN 1;
			ELSE RETURN -1;
			END IF;
		END IF;
	END;
END;

/

CREATE OR REPLACE TYPE BODY FACTURA_OBJ AS
	CONSTRUCTOR FUNCTION FACTURA_OBJ
		(SELF IN OUT NOCOPY FACTURA_OBJ, fecha_compra DATE, dni_cliente CHAR, num_tarjeta CHAR)
	RETURN SELF AS RESULT IS
		a_tarjetas 	TARJETA_ARRAY;
		ind			NUMBER;
		v_tarjeta 	TARJETA_OBJ;
	BEGIN
		SELF.ID := TO_CHAR(SFACTURAS.NEXTVAL);
		SELF.IMPORTE_TOTAL := 0;
		
		IF (fecha_compra IS NOT NULL) THEN
			SELF.FECHA_COMPRA := fecha_compra;
		ELSE
			SELF.FECHA_COMPRA := SYSDATE;
		END IF;
		
		SELECT REF(C) INTO SELF.CLIENTE
		FROM CLIENTES_TAB C
		WHERE C.DNI = dni_cliente;
		
		SELF.TARJETA := num_tarjeta;
		
		RETURN;
		
		/*FOR ind IN SELF.BILLETES.FIRST .. SELF.BILLETES.LAST
		LOOP
			SELECT DEREF(SELF.BILLETES(ind)).PRECIO INTO v_precio FROM DUAL;
			SELECT DEREF(SELF.BILLETES(ind)).IVA INTO v_iva FROM DUAL;
			SELF.IMPORTE_TOTAL := SELF.IMPORTE_TOTAL + (v_precio * (1 + v_iva/100));
		END LOOP;*/
	END;

	ORDER MEMBER FUNCTION OrdFactura(p_factura IN FACTURA_OBJ)
	RETURN NUMBER IS
	BEGIN
		IF p_factura.FECHA_COMPRA < SELF.FECHA_COMPRA THEN RETURN 1;
		ELSIF p_factura.FECHA_COMPRA > SELF.FECHA_COMPRA THEN RETURN -1;
		ELSE RETURN 0;
		END IF;
	END;
END;